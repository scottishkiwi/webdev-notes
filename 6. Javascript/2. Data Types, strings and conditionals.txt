Data Types:

- Eight basic types in JavaScript
- We can put any type in a variable
    - A variable can at one moment be a string and then store a number (using let obviously)
    - Programming languages that allows this are called dynamically typed, meaning that data types exist but variables are not bound to a specific type
  
1. Number 

- represents integer and floating point numbers
- many operators for numbers
- special numeric values exist like Infinity, -Infinity and NaN

2. BigInt

- Number cannot represent integer values larger than 2^53-1
- Sometimes we need really big numbers so we use BigInt
- A BigInt value is created by appending n to the end of an integer: 
const bigIntExample = 1234567892423423423543634564563452345n;

3. String

- Must be surrounded by quotes
- Can us double, single quotes and template literals
    - Template literals provide extended functionality quotes, allowing us to embed variables and expressions into a string using ${...}

4. Boolean (logical type)

- Two values, tru and false
- Commonly stores yes/no values

5. The null value

- Does not belong to any type, it forms its own type which contains only the null value
- It is not a "reference to a non-existing object" or a "null pointer" like in other languages 
    - It is just a special value which represents 'nothing', 'empty' or 'value unknown'.

6. The undefined value

- Like null, undefined is its own type meaning 'value is not assigned'
- For when a variable is declared but not assigned a value

7. Object 

- All other types are called primitive because their value can contain only a single thing (be it a string or a number)
- Objects are used to store collections of data and more complex entities 

8. Symbol

- Used to create unique identifiers for objects
- Will postpone details until we learn more about objects

The typeof operator: 

- Returns the type of the argument in string form e.g "string", "boolean"
- Useful when we want to process values of different types
- Can use typeof(x) or typeof x
- This is not a function! it is an operator
- typeof(null) returns "object" - this is an error in the language, it is not actually an object

#####################################################################

Strings:

const string = 'example string';
const string - "example string";

- note the single quotes or double quotes
- very little difference, stick to one to be consistent
- can use different quotes to include quote mark in the string:

const string = 'quotes "inside" of a string';

- However, we can't include the same quote mark inside the string if it is being used to contain the string
    - This is why we need to escape characters
- Escaping means to mark the character so that it is recognised as text, not part of the code. 
    - In JS we use the backslash /

const string = 'I\'m escaping an apostrophe in this string';

Concatenation: 

- We can join together strings using a template literal:

const greeting = `Hello, ${name}`;

- Allows us to combine strings and variables
- Can also use to combine two variables:

const one = 'Hello, ';
const two = 'Dan';
const joined = `${one}${two}`;

- We can also concatenate strings using the + operator

const one = 'Hello, ';
const two = 'Dan';
const joined = one + ' ' + two;

- Template literals usually give more readable code
- We can also use multi lines with template literals much easier than using the line break (\n) in the string: 

const output = `I like the song.
I gave it a score of 90%.`;


Concatenation in context: 

<button>Press me</button>

const button = document.querySelector('button');

function greet() {
  const name = prompt('What is your name?');
  alert(`Hello ${name}, nice to see you!`);
}

button.addEventListener('click', greet);

- We're using the window.prompt() function which pops up a dialog box to ask the user a question. The user provides the value for variable name. 
- We use template literals to concatenate the string and variable and alert the resulting string to the user


Numbers vs Strings: 

- When we use template literals to combine a number and a striong: 

const name = "Front ";
const number = 242;
console.log(`${name}${number}`); // "Front 242"

- The result is converted into a string because representing a string as a number doesn't really make sense, but representing a number as a string does
- We can convert strings to numbers using the Number object: 

const myString = '456';
const myNum = Number(myString); 

- We can also convert numbers to strings using the toString() method: 

const myNum2 = 456;
const myString2 = myNum2.toString();


String Methods: 

- Primitive values cannot have properties or methods because they are not objects
- In JS, methods and properties are also available to primitive values because JS treats primitive values as objects

length property: 

- returns the length of a string:

string.length; 


Substring methods: 

- All string methods return a new string. They don't modify the original string.
    - Strings are immutable: Strings cannot be changed, only replaced.

1) slice()
- extracts part of a string returns the extracted part in a new string
- method takes a start position parameter and an end position parameter
    - The end position is not included and the first position is 0

let str = "Apple, Banana, Kiwi";
let substring = str.slice(7,13); // Banana

- Accepts negative parameters and counts the position from the end of the string e.gave

let substring = str.slice(-12, -6); // Banana

2) substring()
- similar to slice() but the start position and end position values less than 0 are treated as 0

let str = "Apple, Banana, Kiwi";
let substring = str.substring(7, 13); // Banana

3) substr()
- Second parameter specifies the length of the extracted part

let str = "Apple, Banana, Kiwi";
let substring = str.substr(7, 6); // Banana


Replacing method:

- replace() replaces a specified value with another value in a string and returns a new string 
- it only replaces the first match

let text = "Please visit Microsoft and Microsoft!"
let newText = text.replace("Microsoft","Google"); // Please visit Google and Microsoft!

- can use the /g regular expression flag (global match) to replace all matches: 

let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "Google"); // Please visit Google and Google!


Converting to Upper and Lower Case

- A string is converted to upper case with toUpperCase()
- A string is converted to lower case with toLowerCase()


Trim method: 

- Removes white space from both sides of a string: 

let text1 = "      Hello World!      ";
let text2 = text1.trim();


Converting a String to an Array using split():

- split() takes a parameter to define where to split the string into array elements: 
- No parameter means the array will contain the whole string in index[0]

text.split(",");  // Split on commas
text.split(" ")    // Split on spaces

#####################################################################

