Functions

Built-in browser functions:

- JS has many built-in functions to do useful things without having to write the code ourselves
    - .replace(), .join(), Math.random()
- The browser also offers functions that are not part of the core JS language, they are part of the browser appending


Functions vs methods: 

- Functions that are part of objects are called methods 
- Some of the built-in functions actually are methods as they come from built-in objects

- Custom functions are functions defined in our code, not inside the browser
- Functions can be declared and invoked with the following syntax: 

function showMessage(){
    alert('Hello everyone'); 
}
showMessage(); 

- Some functions require parameters which are values the function needs to perform its job properly
    - e.g Browser built-in replace() function takes two parameters, the substring to find in the main string and the substring to replace that string with
- A parameter is the variable inside the parentheses of the function declaration
- An argument is the value that is passed to the function ('passing arguments')

Optional parameters: 

- Some functions utilize default values in their parameters so that the function can be invoked without providing any parameters 
    - e.g Browser built-in join(); will use comma by default if no parameter is provided to specify a joining/delimiting character
    
function hello(name='Chris'){
    console.log(`Hello ${name}`);
}

hello('James'); // Hello James
hello(); // Hello Chris

- We can also default values to another function: 

function showMessage(from, text = anotherFunction(){
    //this code is only run if no test argument is provided when invoking the showMessage function
},
);


Function expressions: 

- There is another syntax for creating a function called a Function expression

e.g 

function sayHi() {
  alert( "Hello" );
}

other syntax: 

let sayHi = function(){
    alert('Hello');
};

- The function is created using the assignment operator and assigned to the sayHi variable
- We can even print out that value using alert:

alert( sayHi ); 

- Notice the no parentheses after the function means we have not invoked the function, it provides its value. 
    - A functions value is its source code
- With this in mind, we can copy a function to another variable: 

let func = sayHi; 

func(); // Hello
sayHi(); // Hello


Function Expression vs Function Declaration: 

- Syntax difference: 
    - FD -> a function declared as a separate statement 
    - FE -> a function created inside an expression using the assignment operator 
- When a function is created by the JS engine: 
    - FE -> created when the execution reaches it and is usable only from that moment
    - FD -> can be called earlier than it is defined
        - Internal JS algorithms first look for global Function Declarations as part of like an 'initialization stage' before executing code
        - This means we can invoke functions ABOVE the Functional Declaration in the code structure (this doesn't work for Functional Expressions)
- FD is scoped to their block so we can't invoke a function using FD from outside its block
    - e.g a function declared inside conditional statements can't be invoked from outside the conditional blocks 
    - This is where we could use functional expressions!
        - We can instantiate the variable for the function outside of the conditional blocks and then assign the functional expression to the variable inside the conditional blocks

e.g this doesn't work: 

if (age < 18) {
  function welcome() {
    alert("Hello!");
  }
} else {
  function welcome() {
    alert("Greetings!");
  }
}

welcome(); // Error: 'welcome is not defined'

but this does: 

let welcome;

if (age < 18) {
  welcome = function() {
    alert("Hello!");
  };
} else {
  welcome = function() {
    alert("Greetings!");
  };
}

welcome(); // This works

#####################################################################

Callback functions: 

- Passing functions as values

function ask(question, yes, no){
    if (confirm(question)) yes()
    else no();
}

function showOk(){
    alert('You agreed'); 
}

function showCancel(){
    alert('You cancelled'); 
}

ask('Do you agree?', showOk, showCancel); 

- The arguments showOk and showCancel are called callback functions
    - We pass a function and expect it to be 'called back' later if necessary
- We could also use functional expressions in this case:

ask('Do you agree', function(){alert("You agreed");}, function(){ alert("You cancelled");}
);

- Here, the functions are declared as parameters inside the call to the ask() function. Note the functions have no names...


Anonymous functions: 

- Functions can be created without a name, making it an anonymous function
- Often seen when a function expects to receive another function as a parameter:
    - In this case, it is often passed as an anonymous function

function(){
    alert('hello');
}

- e.g we want to run some code when a user types into a text box
    - we use the addEventListener() function of the textbox which expects two parameters: 1) the name of the event to listen for 2) the function to run when the event happens
    - we could define a separate function like so: 

function logKey(event){
    console.log(`You pressed "${event.key}".`);
}

textBox.addEventListener('keydown', logKey); 

    - or we could pass an anonymous function into the addEventListener function: 

textBox.addEventListener('keydown', function(event){
    console.log(`You pressed "${event.key}".`);
});


Arrow functions: 

- There is an alternative and relatively new form we can use to pass anonymous functions: 
- Basic syntax: 

let func = (arg1, arg2,..., argN) => expression;

same as: 

let func = function(arg1, arg2,..., argN){
    return expression; 
}

- Can also be used as an anonymous function passed as a callback function: 

textBox.addEventListener('keydown', (event) => {
    console.log(`You pressed "${event.key}".`);
});

- If the function only has one line, then we can omit the curly brackets: 

textBox.addEventListener('keydown', (event) => console.log(`You pressed "${event.key}".`));

- If the function only takes one parameter, we can also omit the brackets are the parameter: 

textBox.addEventListener('keydown', event => console.log(`You pressed "${event.key}".`));

- If the function needs to return a value and contains only one line, we can omit the return statement: 

const originals = [1,2,3];
const doubled = originals.map(item => item * 2); 
console.log(doubled); // [2,4,6]

- the map arrow function above is the equivalent to: 

function doubleItem(item){
    return item * 2; 
}

- Finally, if there are no arguments then parentheses must be present but are empty: 

let sayHi = () => alert("hello"); 

- Arrow functions make code shorter and more readable and are a recommended best practice
- Very convenient for simply one-line actions

#####################################################################

Function scope and conflicts: 

- Scope: variables/functions defined inside a function are inside their own separate scope, meaning they are unreachable from code outside the functions    
    - Local variables - declared inside a function and only visible inside that function
    - Outer variables - declared outside a function but can be used inside any functions, if there's no local one
- The top level outside all function is called the global scope
    - Values defined in the global scope are accessible from everywhere in the code, which is generally a bad practice
- JS is setup this way for security and organization
    - We don't want variables to be accessible from everywhere in the code e.g external scripts may have variables/functions that share the same name with other external scripts
- NOTE: the same scoping rules do not apply to loops and conditional blocks

#####################################################################

Function return values

- Values that a function returns when it is completed
- Some functions don't return any value (return value is listed as void or undefined)
- A return value is used when a function is an intermediate step of some kind
    - To get to a final result involves some values that need to be changed/calculated by a function
    - The returned value from the function can be stored in a variable, to then be used in the next stage 

- To return a value we use the return keyword: 

function random(number){
    const result = Math.floor(Math.random() * number); 
    return result;
}

or

function random(number){
    return Math.floor(Math.random() * number); 
}

- The return statement can be placed anywhere in a function but the function stops when execution reaches it
- Can be multiple occurrences of return statements in conditional code 

function checkAge(age) {
    if (age >= 18) {
        return true;
    } else {
        return confirm('Do you have permission from your parents?');
    }
}

- We can also use return value without a value which just causes the function to exit immediately

#####################################################################

Naming functions and other best practices: 

- One function, one action 
- Should be a brief yet accurate name that describes what the function does 
    - Usually names start with a verbal prefix e.g get.., show..., create...
- If a function gets big, it likely needs to be split into a few smaller functions
    - Easier to test/debug and the new functions help the code be self-describing which means we can rely less on comments

#####################################################################

JavaScript Call Stack: 

- JS engines use a call stack to manage execution contexts
    - Works off a LIFO principle, last-in-first-out
- When a function is called, the JS engine pushes it on top of the call stack and starts executing the function
- If a function calls another function, the JS engine pushes the new function on top of the call stack
- When the current function completes, its popped off the call stack and the previous function resumes where it left off
- The call stack has a fixed size and if the number of contexts exceeds the size of the stack, a stack overflow error occurrences
    - E.g when you execute a recursive function that has no exit condition

- JS is the single-threaded programming language
    - JS engine has only one call stack and can only do one thing at a time
- We can use asynchronous JS meaning the engine can execute other tasks while waiting for another task to complete
    - This is done using an event loop, covered later

#####################################################################

Knowledge Check

What are functions useful for?
- Allow us to consolidate specific logic or calculations that can be reused with different arguments 
- Functions should only do a single task

How do you invoke a function?
- Using the functionName(); syntax, ensuring we include the brackets   
    - without the brackets we are just getting the variables value, which is the functions source code (this allows us to assign function code to another variable)

What are anonymous functions?
- Functions without a name, usually used as a parameter for another function (callback function) 
- Keeps code cleaner and leaner if we don't actually need to functionally declare this function

What is function scope?
- Variables inside functions have their own function scope. Variables that are assigned values inside a function can't be used outside of the function.

What are return values?
- The values returned from a function using the return keyword
- Functions can have no return values
- Sometimes functions can have multiple return keywords, if they are nested inside Conditionals
- The function ends when it reaches a return statement

What are arrow functions?
- A new leaner type of function specifically for writing simple one line functions in a more concise and readable way
- Allows us to omit the function keyword, the curly braces and the return keyword
    - Can also omit the parameters brackets if and only if there is one parameter