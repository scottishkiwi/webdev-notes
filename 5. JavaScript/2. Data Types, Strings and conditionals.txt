Data Types:

- Eight basic types in JavaScript
- We can put any type in a variable
    - A variable can at one moment be a string and then store a number (using let obviously)
    - Programming languages that allows this are called dynamically typed, meaning that data types exist but variables are not bound to a specific type
  
1. Number 

- represents integer and floating point numbers
- many operators for numbers
- special numeric values exist like Infinity, -Infinity and NaN

2. BigInt

- Number cannot represent integer values larger than 2^53-1
- Sometimes we need really big numbers so we use BigInt
- A BigInt value is created by appending n to the end of an integer: 
const bigIntExample = 1234567892423423423543634564563452345n;

3. String

- Must be surrounded by quotes
- Can us double, single quotes and template literals
    - Template literals provide extended functionality quotes, allowing us to embed variables and expressions into a string using ${...}

4. Boolean (logical type)

- Two values, tru and false
- Commonly stores yes/no values

5. The null value

- Does not belong to any type, it forms its own type which contains only the null value
- It is not a "reference to a non-existing object" or a "null pointer" like in other languages 
    - It is just a special value which represents 'nothing', 'empty' or 'value unknown'.

6. The undefined value

- Like null, undefined is its own type meaning 'value is not assigned'
- For when a variable is declared but not assigned a value

7. Object 

- All other types are called primitive because their value can contain only a single thing (be it a string or a number)
- Objects are used to store collections of data and more complex entities 

8. Symbol

- Used to create unique identifiers for objects
- Will postpone details until we learn more about objects

The typeof operator: 

- Returns the type of the argument in string form e.g "string", "boolean"
- Useful when we want to process values of different types
- Can use typeof(x) or typeof x
- This is not a function! it is an operator
- typeof(null) returns "object" - this is an error in the language, it is not actually an object

#####################################################################

Strings:

const string = 'example string';
const string - "example string";

- note the single quotes or double quotes
- very little difference, stick to one to be consistent
- can use different quotes to include quote mark in the string:

const string = 'quotes "inside" of a string';

- However, we can't include the same quote mark inside the string if it is being used to contain the string
    - This is why we need to escape characters
- Escaping means to mark the character so that it is recognised as text, not part of the code. 
    - In JS we use the backslash /

const string = 'I\'m escaping an apostrophe in this string';

Concatenation: 

- We can join together strings using a template literal:

const greeting = `Hello, ${name}`;

- Allows us to combine strings and variables
- Can also use to combine two variables:

const one = 'Hello, ';
const two = 'Dan';
const joined = `${one}${two}`;

- We can also concatenate strings using the + operator

const one = 'Hello, ';
const two = 'Dan';
const joined = one + ' ' + two;

- Template literals usually give more readable code
- We can also use multi lines with template literals much easier than using the line break (\n) in the string: 

const output = `I like the song.
I gave it a score of 90%.`;


Concatenation in context: 

<button>Press me</button>

const button = document.querySelector('button');

function greet() {
  const name = prompt('What is your name?');
  alert(`Hello ${name}, nice to see you!`);
}

button.addEventListener('click', greet);

- We're using the window.prompt() function which pops up a dialog box to ask the user a question. The user provides the value for variable name. 
- We use template literals to concatenate the string and variable and alert the resulting string to the user


Numbers vs Strings: 

- When we use template literals to combine a number and a string: 

const name = "Front ";
const number = 242;
console.log(`${name}${number}`); // "Front 242"

- The result is converted into a string because representing a string as a number doesn't really make sense, but representing a number as a string does
- We can convert strings to numbers using the Number object: 

const myString = '456';
const myNum = Number(myString); 

- We can also convert numbers to strings using the toString() method: 

const myNum2 = 456;
const myString2 = myNum2.toString();


String Methods: 

- Primitive values cannot have properties or methods because they are not objects
- In JS, methods and properties are also available to primitive values because JS treats primitive values as objects

length property: 

- returns the length of a string:

string.length; 


Substring methods: 

- All string methods return a new string. They don't modify the original string.
    - Strings are immutable: Strings cannot be changed, only replaced.

1) slice()
- extracts part of a string returns the extracted part in a new string
- method takes a start position parameter and an end position parameter
    - The end position is not included and the first position is 0

let str = "Apple, Banana, Kiwi";
let substring = str.slice(7,13); // Banana

- Accepts negative parameters and counts the position from the end of the string e.gave

let substring = str.slice(-12, -6); // Banana

2) substring()
- similar to slice() but the start position and end position values less than 0 are treated as 0

let str = "Apple, Banana, Kiwi";
let substring = str.substring(7, 13); // Banana

3) substr()
- Second parameter specifies the length of the extracted part

let str = "Apple, Banana, Kiwi";
let substring = str.substr(7, 6); // Banana


Replacing method:

- replace() replaces a specified value with another value in a string and returns a new string 
- it only replaces the first match

let text = "Please visit Microsoft and Microsoft!"
let newText = text.replace("Microsoft","Google"); // Please visit Google and Microsoft!

- can use the /g regular expression flag (global match) to replace all matches: 

let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "Google"); // Please visit Google and Google!


Converting to Upper and Lower Case

- A string is converted to upper case with toUpperCase()
- A string is converted to lower case with toLowerCase()


Trim method: 

- Removes white space from both sides of a string: 
let text1 = "      Hello World!      ";
let text2 = text1.trim();


Converting a String to an Array using split():

- split() takes a parameter to define where to split the string into array elements: 
- No parameter means the array will contain the whole string in index[0]

text.split(",");  // Split on commas
text.split(" ")    // Split on spaces

#####################################################################

Conditionals: 

Comparisons: 

- All comparison operators return a boolean value
- A comparison result can be assigned to a variable, like any other value
- When comparing values of different types, JS converts the values to numbers:
    - excluding when comparing with the strict operator check (===)

alert ('2' > 1); //true, string '2' becomes a number 2

- For boolean values, true becomes 1 and false becomes 0:

alert(true == 1); // true, boolean value true becomes 1

Strict equality: 

- The regular equality check (==) cannot differentiate 0 from false: 

alert(0 == false); //true
alert('' == false); //true

- This is because operands of different types are converted to numbers with the equality operator ==
    - So 0, false and an empty string all convert to 0
- The string equality operator (===) checks the equality of values WITHOUT type conversion
    - So if a and b are different types, === will return false without any attempt to convert the values
    - There is a strict non-equality operator too (!== compared to !=)

Comparison with null and undefined: 

- Strict equality check (===) will say these values are not equal as they are of different types
- The non-strict check (==) null and undefined equal each other, but not any other value

Good rules to avoid problems: 

- Be careful using comparisons with undefined/null when using the non-strict equality operator
- Don't use comparisons (>=, >, <, <=) with a variable which may be null/undefined as there will be some unexpected behavior   
    - null becomes 0 and undefined becomes NaN
    - Checking for null/undefined separately is a good idea


Conditional statements: 

- Use if to specify a block of code to be executed, if a specified condition is true

The if statement: 

if (condition){
    //code to be run if condition is true
}

- Use else to specify a block of code to be executed, if the same condition is false

if (condition){
    
}else{
    //code to be run if condition is not true
}

- Use else if to specify a new condition to test, if the first condition is false

if (condition){
    
}else if (condition2){
    //code to be run if condition2 is true
}else{

}

- Use switch to specify many alternative blocks of code to be executed
- The switch expression is evaluated once and the value of the expression is compared with the values of each case.
    - If there is a match, the associated block of code is executed.
    - If there is no match, the default code block is executed.

switch(expression){
    case x:
        //code block
        break;
    case y: 
        //code block
        break;
    default:
        //code block
}


Logical operators:

- Four logical operators in JS: OR (||), AND (&&), NOT (!) and Nullish Coalescing (??)

OR (||):

- In most programming languages, just used for boolean values

result = a || b;

alert( true || true );   // true
alert( false || true );  // true
alert( true || false );  // true
alert( false || false ); // false

- The result is always true, unless when both operands are false
- If the operand is not a boolean, it is converted to a boolean for evaluation
    - E.g 1 = true and 0 = false
- Usually OR is used in an if statement to test if any of the provided conditionals are true: 

if (hour < 10 || hour > 18){
    alert ('shop closed'); 
}

- OR finds the first truthy value  
    - It evaluates operands from left to right
    - Each operand is converted to a boolean and if the result is true, it stops and returns the original value of that operand
    - If all operands are evaluated (i.e all were false), then the last operand is returned
- This allows us to do some clever things: 

1) Use the first truthy value from a list of variables:

let firstName = "";
let lastName = "";
let nickName = "";
alert(firstName || lastName || nickName || "Anonymous");

AND (&&):

result = a && b;

- Returns true when both operands are truthy and false otherwise

let hour = 10;
let minute = 30;

if (hour == 10 && minute == 30) {
  alert( 'The time is 12:30' );
}

- Just like OR, any value is allowed as an operator as they will be converted to boolean values

- AND finds the first falsy value
    - It evaluates operands from left to right
    - Each operand is converted to a boolean and if the result is false, it stops and returns the original value of that operand
    - If all operands have been evaluated (i.e if all were true), then the last operand is returned 

NOTE: The precedence of AND is higher than OR: 

a && b || c && d is essentially: (a && b) || (c && d)

NOT (!):

- Accepts a single argument and converts the operand to boolean type, then returns the inverse value

alert(!true); //false
alert(!0); //true

- We can use double exclamation marks for a double NOT (!!) to convert a value to a boolean type
    - The first NOT converts the value to boolean and returns the inverse, the second NOT inverses it again, resulting in a plain value-to-boolean conversion.
    - This is essentially the same as using the built-in Boolean function: 

alert( !!"non-empty string" ); // true
alert( Boolean("non-empty string") ); //true


Ternary operator: 

- Tests a condition and returns one value/expression if it is true, and another if it is false
- Can take up a lot less code than an if...else block

Pseudocode:
(condition) ? run this code if true : run this code if false

e.g

let greeting = ( isBirthday ) ? 'Happy Birthday!' : 'Good morning!'; 

#####################################################################

Knowledge check: 

What are the eight data types in JavaScript?
- Number, String, boolean, BigInt, null, undefined, Object, Symbol

Which data type is NOT primitive?
- Objects are not primitive as they can have properties and methods/functions

What is the relationship between null and undefined?
- Both null and undefined are their own separate data types. null is a value which represents nothing, empty, or value unknown. undefined is a value which means that no value is assigned.
- The non strict equality operator will say that null and undefined are equal. The strict equality operator will not as they are different types. 

What is the difference between single, double, and backtick quotes for strings?
- Single and double quotes are used in the same situations but sometimes we use one type so that we can include the other type in the string e.g "I'm happy" whereas 'I'm happy' won't work
- The backtick quotes (template literals) allow for variable and expression concatenation inside strings

What is the term for embedding variables/expressions in a string?
- Concatenation 

Which type of quote lets you embed variables/expressions in a string?
- Template literals (back ticks)

How do you embed variables/expressions in a string?
- Using the ${variable/expression} syntax e.g `I like the song ${song}. My score is ${score/highestScore*100}%'

How do you escape characters in a string?
- Using a backslash (\)

What is the difference between the slice/substring/substr string methods?
- slice() takes two arguments, the start position and the end position. The sliced word returned is from the start position to the end position-1. 
    - slice() also accepts negative values which will count back from the end of the word
- substring() is the same as slice() but we cannot provide negative values
- subtr() takes two arguments, the start position and the length of the word

What are the three logical operators and what do they stand for?
- OR, AND and NOT
- OR: from left to right, OR converts operands to boolean values and stops when it finds the first truthy value. It then returns the original value of the truthy operand.
- AND: from left to right, AND converts operands to boolean values and stop when it finds the first falsy value. It then returns the original value of the falsy operand. 
- NOT: converts the operand to boolean and then returns its inverse boolean value

What are the comparison operators?
- <, >, <=, >=, ==, ====, !=

What are truthy and falsy values?
- Truthy values are values thats boolean equivalent value is true
- Falsy values are values thats boolean equivalent value is false

What are the falsy values in JavaScript?
- 0, empty strings, null, undefined and NaN

What are conditionals?
- Statements that allow us to run a certain piece of code only if a condition is true 

What is the syntax for an if/else conditional?

if(condition){

}else{

}

What is the syntax for a switch statement?

switch(expression){
    case x:
        //code
        break;
    case y: 
        //code
        break;
    default; 
}

What is the syntax for a ternary operator?

(condition) ? code to run if true : code to run if false;

What is nesting?

- Nesting allows us to nest conditionals so that we can check one condition is true, and then another if we want a specific thing to happen if both conditions are true
